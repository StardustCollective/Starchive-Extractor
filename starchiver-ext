#!/bin/bash

path=""
network_choice=""
delete_snapshots=false
overwrite_snapshots=false
dash_0=false
datetime=false
delete_snapshot_ts=""

# Colors for logging
RED='\033[0;31m'
LRED='\033[0;91m'
PINK='\033[0;95m'
GREEN='\033[0;32m'
LGREEN='\033[0;92m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
LBLUE='\033[0;94m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
LCYAN='\033[0;96m'
GRAY='\033[0;90m'
LGRAY='\033[0;97m'
WHITE='\033[0;37m'
BOLD='\033[1m'
UNDERLINE='\033[4m'
NC='\033[0m' # No Color

# Function that works like echo but simplifies font coloring
talk() {
    local message="$1"
    local color="$2"
    echo -e "${color}${message}${NC}"
}

# Install necessary tools
install_tools() {
    # Check for tar and install if not found
    if ! command -v tar &> /dev/null; then
        talk "tar could not be found, installing..." $GREEN
        sudo apt-get install -y tar
    fi

    # Check for sha256sum (part of coreutils) and install if not found
    if ! command -v sha256sum &> /dev/null; then
        talk "sha256sum could not be found, installing..." $GREEN
        sudo apt-get install -y coreutils
    fi

    # Check for pv and install if not found
    if ! command -v pv &> /dev/null; then
        talk "pv could not be found, installing..." $GREEN
        sudo apt-get install -y pv
    fi
}

# Function to determine hash URL based on network choice
set_hash_url() {
    local hashurl=""
    case $network_choice in
        mainnet)
            hashurl="http://128.140.33.142:7777/hash.txt"
            ;;
        integrationnet)
            hashurl="http://5.161.93.223:7777/hash.txt"
            ;;
        testnet)
            hashurl="http://5.161.189.245:7777/hash.txt"
            ;;
        *)
            echo "Invalid network choice: $network_choice"
            exit 1
            ;;
    esac
    echo "$hashurl"
}

# Processes the download, validation and extraction of Starchive containers
download_verify_extract_tar() {
    local hash_url_base=$1
    local extraction_path=$2
    local start_line=${3:-1}
    local hash_file_path="${HOME}/hash_file.txt"
    local extracted_hashes_log="${HOME}/extracted_hashes.log"
    
    sudo -v

    echo ""
    talk "Downloading the hash file from:" $BOLD
    talk "$hash_url_base" $LGRAY
    if ! wget -q -nv -O "$hash_file_path" "$hash_url_base"; then
        talk "Error downloading the hash file from $hash_url_base" $LRED
        exit 0
    fi

    # Check if the extraction path is empty and set a flag for full extraction if it is
    if [ -z "$(ls -A "$extraction_path")" ]; then
        talk "No existing snapshots found. Performing full extraction." $LGREEN
        start_line=1
    else
        if find "$extraction_path" -type f -size +0c -print -quit | grep -q .; then
            cleanup_snapshots "$extraction_path"
        fi
    fi

    local total_files=$(wc -l < "$hash_file_path")
    local current_file=$((start_line - 1))
    local file_counter=$start_line

    [ ! -f "$extracted_hashes_log" ] && touch "$extracted_hashes_log"

    tail -n +$start_line "$hash_file_path" | while IFS= read -r line; do
        current_file=$((current_file + 1))
        local file_hash=$(echo $line | awk '{print $1}')
        local tar_file_name=$(echo $line | awk '{print $2}')
        local tar_file_path="${HOME}/${tar_file_name}"
        local tar_url="${hash_url_base%/*}/$tar_file_name"
        local download_directory=$(dirname "$tar_file_path")

        echo ""
        if grep -q "$file_hash" "$extracted_hashes_log"; then
            talk "${BOLD}Processing Starchive $file_counter of $total_files:${NC} ${BOLD}${LCYAN}$tar_file_name${NC}"
            talk "Starchive has already been extracted successfully. Skipping." $LGREEN
            echo "$file_hash"
            continue
        fi

        talk "${BOLD}Processing Starchive $file_counter of $total_files:${NC} ${BOLD}${LCYAN}$tar_file_name${NC}"

        if [ -f "$tar_file_path" ]; then
            talk "Starchive already exists. Verifying SHA256 Hash..." $LGRAY
            local calculated_hash=$(pv "$tar_file_path" | sha256sum | awk '{print $1}')
            if [ "$calculated_hash" = "$file_hash" ]; then
                talk "Hash matches. Using the existing Starchive." $LGREEN
                echo "Calculated hash: $calculated_hash"
            else
                talk "Hash mismatch. Redownloading..." $LRED
                rm -f "$tar_file_path"
                if ! check_space_for_download "$tar_url" "$download_directory"; then
                    talk "Insufficient disk space for downloading $tar_file_name. Exiting script." $LRED
                    exit 1
                fi
                if ! wget -q --show-progress -O "$tar_file_path" "$tar_url"; then
                    talk "Error redownloading $tar_file_name. Aborting." $LRED
                    exit 1
                else
                    talk "Verifying SHA256 Hash..." $LGRAY
                    calculated_hash=$(pv "$tar_file_path" | sha256sum | awk '{print $1}')
                    if [ "$calculated_hash" != "$file_hash" ]; then
                        talk "Error redownloading $tar_file_name. Hash mismatch. Aborting." $LRED
                        exit 1
                    else
                        talk "Hash verified successfully" $LGREEN
                    fi
                fi
            fi
        else
            if ! check_space_for_download "$tar_url" "$download_directory"; then
                talk "Insufficient disk space for downloading $tar_file_name. Exiting script." $LRED
                exit 1
            fi
            talk "Downloading $tar_file_name" $LGRAY
            if ! wget -q --show-progress -O "$tar_file_path" "$tar_url"; then
                talk "Error downloading $tar_file_name. Aborting." $LRED
                exit 1
            else
                talk "Verifying SHA256 Hash..." $LGRAY
                local calculated_hash=$(pv "$tar_file_path" | sha256sum | awk '{print $1}')
                if [ "$calculated_hash" != "$file_hash" ]; then
                    talk "Hash mismatch. Error downloading $tar_file_name. Aborting." $LRED
                    exit 1
                else
                    talk "Hash verified successfully" $LGREEN
                fi
            fi
        fi

        talk "Extracting Starchive:" $BOLD
        sudo pv "$tar_file_path" | sudo tar --overwrite -xzf - -C "$extraction_path"
        echo -e "\n${BOLD}$file_counter of $total_files Starchives extracted successfully.${NC}"

        echo "$file_hash" >> "$extracted_hashes_log"
        rm -f "$tar_file_path"
        file_counter=$((file_counter + 1))
    done

    echo ""

    if wget -q --spider "$files_to_remove_url" > /dev/null 2>&1; then
        echo ""
        talk "Downloading files_to_remove.txt..." $BOLD
        if wget -q --show-progress -O "$files_to_remove_path" "$files_to_remove_url"; then
            local total_files_to_remove=$(wc -l < "$files_to_remove_path")
            local processed_files=0
            while IFS= read -r file; do
                file=$(echo "$file" | sed 's/^\.//')
                local full_path="${extraction_path}${file}"
                if [ -f "$full_path" ]; then
                    sudo rm -r "$full_path"
                fi
                processed_files=$((processed_files + 1))
                local progress=$((processed_files * 100 / total_files_to_remove))
                echo -ne "Removing obsolete files: $processed_files/$total_files_to_remove (${progress}%) \r"
            done < "$files_to_remove_path"
            echo -ne "\n"
            echo ""
            echo "Deleting files_to_remove.txt"
            rm -f "$files_to_remove_path"
        else
            talk "Error downloading files_to_remove.txt." $LRED
        fi
    fi
    
    echo "Deleting hash file..."
    rm -f "$hash_file_path"
    echo "Deleting extracted_hashes.log"
    rm -f "$extracted_hashes_log"
    echo "Cleanup complete."
    echo ""
    talk "---==[ STARCHIVER ]==---" $BOLD$LGREEN
    talk "Create and Restore Starchive files." $LGREEN
    echo ""
    talk "Don't forget to tip the bar tender!" $BOLD$YELLOW
    talk "  ${BOLD}This script was written by:${NC} ${BOLD}${LGREEN}@Proph151Music${NC}"
    talk "     ${BOLD}for the ${LBLUE}Constellation Network${NC} ${BOLD}ecosystem.${NC}"
    echo ""
    talk "  DAG Wallet Address for sending tips can be found here..." $YELLOW
    talk "     ${BOLD}DAG0Zyq8XPnDKRB3wZaFcFHjL4seCLSDtHbUcYq3${NC}"
    echo ""
    exit 0
}

list_starchive_containers() {
    local snapshot_time="$1"  # Format: YYYY-MM-DD.HH
    local data_path="$2"
    local hash_url_base=$(set_hash_url)
    local hash_file_path="${HOME}/hash_file.txt"

    echo "Downloading the hash file from: $hash_url_base"
    if ! wget -q -O "$hash_file_path" "$hash_url_base"; then
        echo "Failed to download or found empty hash file. Exiting."
        return 1
    fi

    local year=$(echo $snapshot_time | cut -d'-' -f1)
    local month=$(echo $snapshot_time | cut -d'-' -f2 | sed 's/^0*//')
    local day=$(echo $snapshot_time | cut -d'-' -f3 | cut -d'.' -f1 | sed 's/^0*//')
    local hour=$(echo $snapshot_time | cut -d'.' -f2 | sed 's/^0*//')
    local found=false
    local start_line_number=0
    local patterns=()

    echo "Searching archives starting from: $snapshot_time"

    # Generate matching patterns
    patterns+=("${year}-$(printf "%02d" $month)-$(printf "%02d" $day).$(printf "%02d" $hour).tar.gz")
    patterns+=("${year}-$(printf "%02d" $month)-$(printf "%02d" $day).$(printf "%02d" $hour)_part_1.tar.gz")
    patterns+=("${year}-$(printf "%02d" $month)-$(printf "%02d" $day).00.tar.gz")
    patterns+=("${year}-$(printf "%02d" $month)-$(printf "%02d" $day).00_part_1.tar.gz")
    patterns+=("${year}-$(printf "%02d" $month)-$(printf "%02d" $day).tar.gz")
    patterns+=("${year}-$(printf "%02d" $month)-$(printf "%02d" $day)_part_1.tar.gz")
    patterns+=("${year}-$(printf "%02d" $month).tar.gz")
    patterns+=("${year}-$(printf "%02d" $month)_part_1.tar.gz")
    patterns+=("${year}.tar.gz")
    patterns+=("${year}_part_1.tar.gz")

    # Search for each pattern in the entire file
    for pattern in "${patterns[@]}"; do
        local result=$(grep -n "$pattern" "$hash_file_path")
        if [[ ! -z "$result" ]]; then
            start_line_number=$(echo "$result" | cut -d: -f1 | head -n 1)
            local archive_name=$(echo "$result" | awk '{print $2}')
            found=true
            echo "Matched Found: $archive_name on line $start_line_number"

            formatted_month=$(printf "%02d" "$month")
            formatted_day=$(printf "%02d" "$day")
            if [ -z "$hour" ]; then
                hour="00"
            fi
            formatted_hour=$(printf "%02d" "$hour")
            delete_snapshot_ts=$(date -d "$year-$formatted_month-$formatted_day $formatted_hour:00:00" '+%s')

            break
        fi
    done

    if [ "$found" == true ]; then
        if [ "$dash_o" == true ]; then
            delete_snapshots=false
            overwrite_snapshots=true
        else
            delete_snapshots=true
            overwrite_snapshots=false
        fi
        download_verify_extract_tar "$hash_url_base" "$data_path" "$start_line_number"
    else
        echo "No matching Starchive containers found for time: $snapshot_time"
    fi
}

convert_to_human_readable() {
    local bytes=$1
    if [ $bytes -lt 1024 ]; then
        echo "${bytes} bytes"
    elif [ $bytes -lt 1048576 ]; then
        echo "$(bc <<< "scale=3; $bytes/1024") KB"
    elif [ $bytes -lt 1073741824 ]; then
        echo "$(bc <<< "scale=3; $bytes/1048576") MB"
    else
        echo "$(bc <<< "scale=3; $bytes/1073741824") GB"
    fi
}

check_space_for_download() {
    local url=$1
    local download_path=$2

    # Get the file size from the URL
    local file_size=$(curl -sI "$url" | grep -i "Content-Length" | awk '{print $2}' | tr -d '\r')
    local human_readable_file_size=$(convert_to_human_readable $file_size)
    echo "File size to download: $human_readable_file_size"

    # Get available space at the download path in bytes
    local avail_space=$(df --output=avail -B1 "$download_path" | tail -n1)
    local human_readable_avail_space=$(convert_to_human_readable $avail_space)
    echo "Available space in $download_path: $human_readable_avail_space"

    # Compare and return the result
    if [[ $avail_space -lt $file_size ]]; then
        echo "Insufficient disk space."
        return 1
    else
        return 0
    fi
}

search_data_folders() {
    local temp_file="/tmp/data_folders_with_snapshot.txt"
    echo "Searching for snapshot data folders..." >&2
    find / -type d -name "snapshot" -path "*/data/snapshot" -printf '%h\n' 2>/dev/null > "$temp_file"

    if [ ! -s "$temp_file" ]; then
        echo "No 'data' folders with 'snapshot' found." >&2
        rm -f "$temp_file"
        return 1
    else
        echo "" >&2
        echo "Select a snapshot data folder path:" >&2
        cat "$temp_file" | nl -w2 -s') ' >&2
        echo "  0) Enter path manually" >&2
        echo ""
        echo "Make a selection:" >&2

        read -r selection >&2

        if [[ $selection =~ ^[0-9]+$ ]]; then
            if [ "$selection" -eq 0 ]; then
                read -r -p "Enter the path of the data folder: " directory >&2
                directory=$(echo "$directory" | xargs)
                echo "$directory"
            elif [ -s "$temp_file" ] && [ "$selection" -gt 0 ] && [ "$selection" -le $(wc -l < "$temp_file") ]; then
                local selected_folder=$(sed "${selection}q;d" "$temp_file" | tr -d '\n')
                echo "$selected_folder"
            else
                echo "Invalid selection." >&2
                return 1
            fi
        else
            echo "No selection made or invalid input." >&2
            return 1
        fi

        rm -f "$temp_file"
    fi
}

cleanup_snapshots() {
    local data_path=$1
    local confirmation
    local final_confirmation
    local extracted_hashes_log="${HOME}/extracted_hashes.log"

    if [[ $delete_snapshots == true && -n "$delete_snapshot_ts" ]]; then
        talk "Deleting snapshots from $(date -d "@$delete_snapshot_ts") and newer in $data_path" $CYAN
        sudo find "$data_path" -type f -printf '%T@ %p\n' | awk -v ts="$delete_snapshot_ts" '$1 >= ts {print $2}' | sudo xargs -r rm 2>/dev/null
        talk "Snapshot deletion based on timestamp completed." $GREEN$BOLD
        return
    elif [[ $delete_snapshots == true ]]; then
        talk "Deleting all snapshots in ${data_path}" $CYAN
        sudo find "$data_path" -type f -delete
        talk "Snapshot deletion completed." $GREEN$BOLD
        return
    fi

    if [[ $delete_snapshots == true ]]; then
        if [ -f "$hash_file_path" ]; then
            if [ -f "$extracted_hashes_log" ]; then
                talk "Removing extracted_hashes.log file."
                rm -f "$extracted_hashes_log"
            fi
        fi
        talk "Snapshot deletion completed." $GREEN
        return
    fi

    if [[ $overwrite_snapshots == true ]]; then
        talk "Overwriting snapshots in ${data_path}" $GREEN$BOLD
        return
    fi

    while true; do
        echo ""
        talk "Do you want to clean up and delete existing snapshots? (d/o/c)" $CYAN$BOLD
        talk "  (${data_path})" $BOLD
        echo ""
        talk "    Answering 'D' will delete all snapshots."
        talk "    Answering 'O' will overwrite all snapshots."
        talk "    Answering 'C' will cancel and exit."
        read -r confirmation

        case $confirmation in
            [Dd])
                echo ""
                talk "Type '${CYAN}YES${NC}'${BOLD} (in all CAPS) to confirm the deletion of snapshots:" $BOLD
                talk "   (${data_path})"
                echo ""
                read -r final_confirmation
                if [[ "$final_confirmation" == "YES" ]]; then
                    talk "Cleaning up snapshots in ${data_path}" $GREEN
                    talk "Please wait while deleting snapshots..." $BOLD
                    sudo find "$data_path" -type f -delete
                    talk "Snapshot cleanup completed." $GREEN
                    if [ -f "$extracted_hashes_log" ]; then
                        talk "Obsolete extracted_hashes.log deleted." $GREEN
                        rm -f "extracted_hashes_log"
                    fi
                else
                    talk "Operation cancelled." $RED
                fi
                break
                ;;
            [Oo])
                echo ""
                talk "Type '${CYAN}YES${NC}'${BOLD} (in all CAPS) to confirm the overwriting of snapshots:" $BOLD
                talk "   (${data_path})"
                echo ""
                read -r final_confirmation
                if [[ "$final_confirmation" == "YES" ]]; then
                    talk "Proceeding to overwrite snapshots." $GREEN
                else
                    talk "Operation cancelled." $RED
                fi
                break
                ;;
            [Cc])
                talk "Operation cancelled. Exiting." $RED
                exit 0
                ;;
            *)
                talk "Incorrect choice. Please try again." $RED
                ;;
        esac
    done
}

# Main menu function
main_menu() {
    while true; do
        clear
        echo ""
        echo ""
        talk "Don't forget to tip the bar tender!" $BOLD$YELLOW
        talk "  ${BOLD}This script was written by:${NC} ${BOLD}${LGREEN}@Proph151Music${NC}"
        talk "     ${BOLD}for the ${LBLUE}Constellation Network${NC} ${BOLD}ecosystem.${NC}"
        echo ""
        talk "  DAG Wallet Address for sending tips can be found here..." $YELLOW
        talk "     ${BOLD}DAG0Zyq8XPnDKRB3wZaFcFHjL4seCLSDtHbUcYq3${NC}"
        echo ""
        talk "---==[ STARCHIVER ]==---" $BOLD$LGREEN
        talk "Create and Restore Starchive files." $LGREEN
        echo ""
        talk "Select a network:"
        talk "${BOLD}M)${NC} ${BOLD}${LCYAN}MainNet${NC}"
        talk "${BOLD}I)${NC} ${BOLD}${LCYAN}IntegrationNet${NC}"
        talk "${BOLD}T)${NC} ${BOLD}${LCYAN}TestNet${NC}"
        talk "${BOLD}C)${NC} ${BOLD}${LCYAN}Custom${NC}"
        talk "${BOLD}Q)${NC} ${BOLD}${LCYAN}Quit${NC}"
        echo ""
        read -p "$(echo -e ${BOLD}Choose your adventure${NC} [M, I, T, C, Q]:) " network_choice
        echo ""

        case $network_choice in
            [Mm])
                path=$(search_data_folders | xargs)
                if [ $? -eq 1 ] || [ -z "$path" ]; then
                    talk "No valid data folder with snapshot selected. Exiting." $LRED
                    exit 1
                fi
                hashurl="http://128.140.33.142:7777/hash.txt"
                download_verify_extract_tar "$hashurl" "$path"
                ;;
            [Ii])
                path=$(search_data_folders | xargs)
                if [ $? -eq 1 ] || [ -z "$path" ]; then
                    talk "No valid data folder with snapshot selected. Exiting." $LRED
                    exit 1
                fi
                hashurl="http://5.161.93.223:7777/hash.txt"
                download_verify_extract_tar "$hashurl" "$path"
                ;;
            [Tt])
                path=$(search_data_folders | xargs)
                if [ $? -eq 1 ] || [ -z "$path" ]; then
                    talk "No valid data folder with snapshot selected. Exiting." $LRED
                    exit 1
                fi
                hashurl="http://5.161.189.245:7777/hash.txt"
                download_verify_extract_tar "$hashurl" "$path"
                ;;
            [Cc])
                path=$(search_data_folders | xargs)
                if [ $? -eq 1 ] || [ -z "$path" ]; then
                    talk "No valid data folder with snapshot selected. Exiting." $LRED
                    exit 1
                fi
                read -p "${BOLD}Enter the URL of the Hash file:${NC}) " hashurl
                download_verify_extract_tar "$hashurl" "$path"
                ;;
            [Qq])
                exit 0
                ;;
            *)
                talk "Invalid choice, please choose again." $LRED
                ;;
        esac
    done
}

function check_for_recent_snapshot() {
    if [[ "$datetime" == "true" && -z "$snapshot_time" ]]; then
        echo "Searching for the most recent snapshot file..."
        local latest_snapshot=$(find "$path" -type f -regex '.*/[0-9]+$' -printf '%T@ %p\n' | sort -r | head -n1 | cut -d" " -f2)
        if [[ -n "$latest_snapshot" ]]; then
            # Convert the timestamp to the required format
            snapshot_time=$(date -d "@$(stat -c %Y "$latest_snapshot")" -d '-1 hour' "+%Y-%m-%d.%H")
            echo "The adjusted snapshot time is $snapshot_time"
        else
            echo "No valid snapshot found within the specified path."
            exit 1
        fi
    fi
}

function parse_arguments() {
    while [[ "$#" -gt 0 ]]; do
        case "$1" in
            --datetime)
                datetime=true
                if [[ -z "$2" || "$2" =~ ^- ]]; then
                    echo "No specific time given for --datetime, will calculate based on latest snapshot."
                else
                    shift
                    echo "Processing --datetime with value: $1"
                    local input="$1"
                    if [[ "$input" =~ ^[0-9]{10}$ ]]; then  # Unix timestamp
                        snapshot_time=$(date -d @"$1" "+%Y-%m-%d.%H")
                    elif [[ "$input" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}\.[0-9]{2}$ ]]; then  # YYYY-MM-DD.HH
                        snapshot_time="$1"
                    elif [[ "$input" =~ ^([0-9]{4}-[0-9]{2}-[0-9]{2})[[:space:]]?[zZ]([0-9]{1,2})([0-9]{2})$ ]]; then
                        local date_part="${BASH_REMATCH[1]}"
                        local hour="${BASH_REMATCH[2]}"
                        local minute="${BASH_REMATCH[3]}"
                        hour=$(printf "%02d" "$hour")  # Ensure hour is two digits
                        snapshot_time="${date_part}.${hour}"
                    else
                        echo "Invalid date format: $1. Expected YYYY-MM-DD.HH or YYYY-MM-DD zHMM or zHHMM."
                        exit 1
                    fi
                fi
                ;;
            --data-path|--data_path)
                shift
                path="$1"
                ;;
            --cluster)
                shift
                network_choice="${1,,}"
                ;;
            -d)
                delete_snapshots=true
                ;;
            -o)
                overwrite_snapshots=true
                dash_o=true
                ;;
            *)
                echo "Unknown option: $1"
                exit 1
                ;;
        esac
        shift
    done
}

# Verify and install tools, if needed
install_tools

parse_arguments "$@"

# Check if datetime processing is needed
if [[ "$datetime" == "true" ]]; then
    if [[ -z "$path" || -z "$network_choice" ]]; then
        echo "Error: Both --data-path and --cluster must be specified."
        exit 1
    else
        if [[ -z "$snapshot_time" ]]; then
            echo "Find the latest snapshot file that contains only digits in its name within subfolders"
            latest_snapshot=$(find "${path}" -type f -regex '.*/[0-9]+$' -printf '%T+ %p\n' | sort -r | head -n1 | cut -d" " -f2)
            if [[ -n "$latest_snapshot" ]]; then
                # Extract the modification time, adjust by subtracting one hour, and format it
                snapshot_time=$(date -d "$(stat -c %y "$latest_snapshot") -1 hour" "+%Y-%m-%d.%H")
                echo "The adjusted snapshot time is $snapshot_time"
            else
                echo "No valid snapshot found."
            fi
        fi
        list_starchive_containers "$snapshot_time" "$path"
    fi
else
    if [ -n "$path" ] && [ -n "$network_choice" ]; then
        hashurl=$(set_hash_url)
        download_verify_extract_tar "$hashurl" "$path"
    else
        main_menu
    fi
fi
